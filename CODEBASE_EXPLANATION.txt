MENTIQ SDK CODEBASE EXPLANATION
================================

This is a complete explanation of the Mentiq SDK codebase, written in simple terms.

OVERVIEW
--------
The Mentiq SDK is a JavaScript/TypeScript library that helps websites track user behavior and send that data to a server. Think of it like a digital spy that watches what users do on your website and reports back to you.

The SDK has two main parts:
1. Core functionality (works with any website)
2. React integration (makes it easier to use with React apps)

Let's go through each file in order:

==========================================
1. PACKAGE.JSON (Main Configuration File)
==========================================

This file tells npm (Node Package Manager) everything about our package:

- "name": "mentiq-sdk" - This is what people will call our package
- "version": "0.1.0" - This is version 0.1.0 (first release)
- "description" - What our package does
- "license": "MIT" - Anyone can use this code freely
- "type": "module" - We're using modern JavaScript modules

The "exports" section is like a menu that tells other programs:
- "." means the main entry point (core SDK)
- "./react" means the React-specific parts
- Each entry has 3 formats:
  * "types" - TypeScript type definitions
  * "import" - Modern ES modules (import/export)
  * "require" - Old-style CommonJS (require/module.exports)

"main", "module", "types" - These are fallbacks for older tools that don't understand the "exports" section.

"files" - When someone installs our package, only these folders/files get included.

"scripts" - Commands we can run:
- "build" - Compiles our TypeScript code into JavaScript
- "dev" - Builds in watch mode (rebuilds when files change)
- "typecheck" - Checks for TypeScript errors without building

"peerDependencies" - These are packages that the user must install themselves:
- "react": ">=17" - User needs React version 17 or higher
- "react-dom": ">=17" - User needs React DOM version 17 or higher

"devDependencies" - Tools we need only during development:
- "@types/react" - TypeScript types for React
- "@types/react-dom" - TypeScript types for React DOM
- "esbuild" - Fast JavaScript bundler
- "typescript" - TypeScript compiler

==========================================
2. TSCONFIG.JSON (TypeScript Configuration)
==========================================

This file tells TypeScript how to compile our code:

- "target": "ES2020" - Compile to JavaScript that works in browsers from 2020+
- "module": "ESNext" - Use the latest module system
- "moduleResolution": "Bundler" - How to find modules (for bundlers like esbuild)
- "lib": ["ES2020", "DOM"] - Include types for ES2020 features and browser APIs
- "declaration": true - Generate .d.ts files (TypeScript type definitions)
- "declarationMap": true - Generate source maps for type definitions
- "sourceMap": true - Generate source maps for debugging
- "strict": true - Enable all strict type checking
- "noImplicitOverride": true - Require 'override' keyword when overriding methods
- "noUnusedLocals": true - Error if we declare variables we don't use
- "noUnusedParameters": true - Error if we declare parameters we don't use
- "noFallthroughCasesInSwitch": true - Error if switch cases fall through
- "skipLibCheck": true - Don't type-check library files (faster)
- "jsx": "react-jsx" - Use the new JSX transform
- "outDir": "dist" - Put compiled files in the 'dist' folder
- "rootDir": "src" - Source files are in the 'src' folder

==========================================
3. SCRIPTS/BUILD.MJS (Build Script)
==========================================

This is a JavaScript file that builds our package using esbuild:

First, it imports what it needs:
- "build" from 'esbuild' - The bundling function
- "rmSync", "mkdirSync" from 'node:fs' - File system operations

Then it:
1. Deletes the old 'dist' folder
2. Creates a new 'dist' folder
3. Defines common settings for all builds:
   - "bundle": true - Combine all files into one
   - "sourcemap": true - Generate source maps for debugging
   - "target": 'es2020' - Target browsers from 2020+
   - "platform": 'browser' - This is for browsers, not Node.js
   - "logLevel": 'info' - Show build progress
   - "external": ['react', 'react-dom'] - Don't bundle React (user provides it)

Then it builds 4 different versions:
1. Core SDK as ES module (dist/index.mjs)
2. Core SDK as CommonJS (dist/index.cjs)
3. React integration as ES module (dist/react/index.mjs)
4. React integration as CommonJS (dist/react/index.cjs)

==========================================
4. SRC/INDEX.TS (Core SDK - Main File)
==========================================

This is the heart of our SDK. Let's break it down section by section:

--- TYPE DEFINITIONS ---
First, we define what our data looks like:

"LogLevel" - Different levels of logging (silent, error, warn, info, debug)

"MentiqConfig" - Configuration options for the SDK:
- "apiKey" - Your secret key to identify your app
- "collectUrl" - Where to send the data
- "flushIntervalMs" - How often to send data (default 3000ms = 3 seconds)
- "maxBatchSize" - How many events to send at once (default 20)
- "debug" - Show debug messages
- "logLevel" - How much to log
- "autoPageview" - Automatically track page views
- "captureClicks" - Automatically track clicks on special elements
- "enablePersistence" - Save data in browser storage

"MentiqEvent" - What a single event looks like:
- "event" - Name of the event (like "button_clicked")
- "distinct_id" - Who did it (user ID)
- "session_id" - Which session (browser session)
- "timestamp" - When it happened
- "url" - Which page
- "properties" - Extra data about the event

"MentiqPublicApi" - What functions users can call:
- "init" - Set up the SDK
- "track" - Record an event
- "identify" - Set who the user is
- "setSuperProperties" - Set properties for all events
- "setUserProperties" - Set properties about the user
- "reset" - Clear all data
- "optOut" - Stop tracking
- "optIn" - Start tracking again
- "flush" - Send data immediately

--- DEFAULTS ---
Default values for configuration options.

--- UTILITY FUNCTIONS ---
"isoNow()" - Gets current time in ISO format (like "2025-01-01T12:00:00.000Z")

"safeParse()" - Safely converts JSON string to object, returns null if it fails

--- MEMORY STORAGE CLASS ---
"MemoryStorage" - A simple storage system that works in memory when browser storage isn't available.

"getBestStorage()" - Tries to use browser storage (localStorage/sessionStorage), falls back to memory if it fails.

--- LOGGER CLASS ---
"Logger" - Handles all the logging with different levels:
- "setLevel()" - Change how much to log
- "should()" - Check if we should log at this level
- "error()", "warn()", "info()", "debug()" - Log at different levels

--- MAIN CLIENT CLASS ---
"MentiqClient" - The main class that does everything:

Constructor:
- Takes configuration
- Sets up logging
- Creates or loads session ID
- Loads saved data from storage
- Sets up automatic tracking

"init()" - Updates configuration

"track()" - Records an event:
- Checks if user opted out
- Creates event object with all the data
- Adds it to the queue
- Sends immediately if queue is full
- Sets up timer to send later

"identify()" - Sets who the user is and saves it

"setSuperProperties()" - Sets properties that get added to all events

"setUserProperties()" - Sets properties about the user

"reset()" - Clears all user data

"optOut()" - Stops tracking

"optIn()" - Starts tracking again

"flush()" - Sends all queued events to the server:
- Tries to use sendBeacon (works even when page is closing)
- Falls back to fetch (normal HTTP request)
- If it fails, puts events back in queue to try later

--- PRIVATE HELPER METHODS ---
"ensureFlushTimer()" - Sets up a timer to send data automatically

"loadOrCreateSession()" - Gets existing session or creates new one

"loadPersistence()" - Loads saved data from storage

"sendPageView()" - Sends page view event and sets up SPA routing detection

"installClickListener()" - Listens for clicks on elements with "data-mentiq-track" attribute

"installVisibilityHandlers()" - Sends data when user switches tabs or closes page

--- SINGLETON PATTERN ---
"singleton" - Global variable to store the one instance of the client

"createMentiq()" - Creates a new client instance

"getMentiq()" - Gets the global client instance

"initMentiq()" - Creates and sets the global client instance

==========================================
5. SRC/REACT/INDEX.TSX (React Integration)
==========================================

This file makes the SDK easier to use with React apps:

--- IMPORTS ---
Imports React hooks and the core SDK

--- CONTEXT ---
"MentiqContext" - React context to share the SDK instance across components

--- PROVIDER COMPONENT ---
"MentiqProvider" - React component that:
- Takes configuration and children
- Creates SDK instance only on client side (not during server-side rendering)
- Provides the SDK to all child components

--- HOOK ---
"useMentiq()" - React hook that:
- Gets the SDK instance from context
- Throws error if not wrapped in MentiqProvider
- Makes it easy to use the SDK in any component

--- PAGE VIEW COMPONENT ---
"TrackPageView" - Optional component that:
- Automatically sends page view event when mounted
- Can take custom event name
- Useful for manual page tracking

==========================================
6. INTEGRATION_GUIDE.MD (Documentation)
==========================================

This file explains how to use the SDK:

Section 1: Installation - How to install the package
Section 2: Initialize - How to set up the provider
Section 3: Track events - How to record user actions
Section 4: Identify users - How to know who is doing what
Section 5: Super properties - How to add data to all events
Section 6: Consent - How to let users opt out
Section 7: SPA routing - How it works with single-page apps
Section 8: Server endpoint - What data gets sent to your server
Section 9: Configuration - All the options you can set
Section 10: SSR safety - How it works with server-side rendering

==========================================
7. README.MD (Package Description)
==========================================

Simple description of what the package does and where to find more info.

==========================================
HOW IT ALL WORKS TOGETHER
==========================================

1. User installs the package: npm install mentiq-sdk

2. User wraps their app in MentiqProvider with their API key and server URL

3. The SDK automatically:
   - Creates a session ID
   - Tracks page views
   - Listens for clicks on special elements
   - Batches events together
   - Sends data to the server every 3 seconds

4. User can also manually:
   - Track custom events
   - Identify users
   - Set properties
   - Opt users out

5. All data gets sent to the user's server in this format:
   {
     "apiKey": "their_key",
     "events": [array of events],
     "user": {user properties}
   }

The SDK is designed to be:
- Fast (batches events, uses sendBeacon)
- Reliable (retries failed sends, works offline)
- Privacy-friendly (users can opt out)
- Easy to use (works with or without React)
- Production-ready (handles errors, has TypeScript types)

That's everything! The SDK is a complete analytics solution that you can drop into any website to start tracking user behavior.
